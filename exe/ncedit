#!/usr/bin/env ruby
require 'escort'
require 'ncedit/version'
require 'ncedit/cmd'

# display help if nothing specified
ARGV.push('-h') if ARGV.empty?

# Add the path to the puppet-code command as a fallback.  It's last to
# allow user to override via the real PATH if necessary
ENV['PATH'] = "#{ENV['PATH']}:/opt/puppetlabs/puppet/bin/:/opt/puppetlabs/client-tools/bin/"


Escort::App.create do |app|
  app.version NCEdit::VERSION
  app.summary "ncedit"
  app.description "Edit PE node classification groups"

  app.command :classes do |command|
    command.summary "Edit classes"
    command.description "Create/edit/delete class in rule"
    command.options do |opts|
      opts.opt(:group_name,
        'NC group name',
        :long => '--group-name',
        :type => :string,
      )
      opts.opt(:class_name,
        'NC class name',
        :long => '--class-name',
        :type => :string,
      )
      opts.opt(:param_name,
        'NC parameter name',
        :long => '--param-name',
        :type => :string,
      )
      opts.opt(:param_value,
        'NC parameter value',
        :long => '--param-value',
        :type => :string,
      )
      opts.opt(:delete_class,
        'Delete this class',
        :long    => '--delete-class',
        :type    => :boolean,
        :default => false,
      )
      opts.opt(:delete_param,
        'Delete this param',
        :long    => '--delete-param',
        :type    => :boolean,
        :default => false,
      )
      opts.opt(:rule,
        'Update the NC group with this rule (JSON fragment)',
        :long    => '--rule',
        :type    => :string,
      )
      opts.dependency :param_value, :on => :param_name

      opts.opt(:rule_mode,
        "Processing instruction for rule supplied with --rule (allowed: 'replace', 'append')",
        :long    => '--rule-mode',
        :type    => :string,
      )
      opts.opt(:smart_update,
        'Smart update',
        :long => '--smart-update',
        :type => :boolean,
      )
    end
    command.action do |options, arguments|
      NCEdit::Cmd::classes(options[:global][:commands][:classes][:options])
    end
  end

  app.command :batch do |command|
    command.summary "Batch processing from YAML/JSON"
    command.description "Process a YAML/JSON file to add/delete classes, parameters and rules"
    command.options do |opts|
      opts.opt(:yaml_file,
        'YAML file',
        :long => '--yaml-file',
        :type => :string,
      )
      opts.opt(:json_file,
        'JSON file',
        :long => '--json-file',
        :type => :string,
      )
      opts.opt(:smart_update,
        'Smart update',
        :long => '--smart-update',
        :type => :boolean,
      )
    end
    command.action do |options, arguments|
      yaml_file = options[:global][:commands][:batch][:options][:yaml_file]
      json_file = options[:global][:commands][:batch][:options][:json_file]
      smart_update = options[:global][:commands][:batch][:options][:smart_update]

      NCEdit::Cmd::batch(yaml_file: yaml_file, json_file: json_file, smart_update: smart_update)
    end
  end

  app.command :groups do |command|
    command.summary "Create/Edit groups"
    command.description "Create or edit groups (and set environment)"
    command.options do |opts|
      opts.opt(:group_name,
               'NC group name',
               :long => '--group-name',
               :type => :string,
               )
      opts.opt(:environment,
               'Group should use this environment',
               :long => '--environment',
               :type => :string,
      )
      opts.opt(:environment_trumps,
               'Group environment overrides all others',
               :long => '--environment-trumps',
               :type => :boolean,
               )
      opts.opt(:rule,
               'Update the NC group with this rule (JSON fragment)',
               :long    => '--rule',
               :type    => :string,
               )

      opts.opt(:rule_mode,
               "Processing instruction for rule supplied with --rule (allowed: 'replace', 'append')",
               :long    => '--rule-mode',
               :type    => :string,
               )
    end
    command.action do |options, arguments|
      NCEdit::Cmd::groups(options[:global][:commands][:groups][:options])
    end
  end


  app.command :update_classes do |command|
    command.summary "Refresh the classes available in the console"
    command.description "Invalidate class cache and ask puppet to re-scan classes"
    command.action do |options, arguments|
      NCEdit::Cmd::update_classes()
    end
  end
end
